// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Step 1: Process input x
    Mux16(a=x, b=false, sel=zx, out=xz);     // Zero x if zx == 1
    Not16(in=xz, out=nxz);                  // Negate xz if nx == 1
    Mux16(a=xz, b=nxz, sel=nx, out=xt);     // Final x

    // Step 2: Process input y
    Mux16(a=y, b=false, sel=zy, out=yz);    // Zero y if zy == 1
    Not16(in=yz, out=nyz);                  // Negate yz if ny == 1
    Mux16(a=yz, b=nyz, sel=ny, out=yt);     // Final y

    // Step 3: Compute function (x & y or x + y)
    And16(a=xt, b=yt, out=andRes);          // x & y
    Add16(a=xt, b=yt, out=addRes);          // x + y
    Mux16(a=andRes, b=addRes, sel=f, out=res); // Select function result

    // Step 4: Handle no (negate the result)
    Not16(in=res, out=nres);                // Negate res if no == 1
    Mux16(a=res, b=nres, sel=no, out=finalRes); // Final result

    // Step 5: Output the result
    And16(a=finalRes, b=finalRes, out=out); // Ensure finalRes is passed to out

    // Step 6: Handle zero detection (zr)
    And16(a=finalRes, b=finalRes, out[0..7]=lowBits, out[8..15]=highBits);
    Or8Way(in=lowBits, out=lowOr);
    Or8Way(in=highBits, out=highOr);
    Or(a=lowOr, b=highOr, out=anySet);
    Not(in=anySet, out=zr);                 // Set zr to 1 if all bits are zero

    // Step 7: Handle negative detection (ng)
    And16(a=finalRes, b=finalRes, out[15]=ng); // Set ng to 1 if MSB is 1
}